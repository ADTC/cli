{"commands":{"app:build":{"id":"app:build","description":"Build the app.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"skip-dependencies-installation":{"name":"skip-dependencies-installation","type":"boolean","description":"Skips the installation of dependencies. Deprecated, use workspaces instead."},"api-key":{"name":"api-key","type":"option","description":"Application's API key that will be exposed at build time.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"Application's Client ID that will be exposed at build time.","multiple":false}},"args":{}},"app:deploy":{"id":"app:deploy","description":"Deploy your Shopify app.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"api-key":{"name":"api-key","type":"option","description":"The API key of your app.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID of your app.","multiple":false},"reset":{"name":"reset","type":"boolean","description":"Reset all your settings."},"force":{"name":"force","type":"boolean","description":"Deploy without asking for confirmation."},"no-release":{"name":"no-release","type":"boolean","description":"Creates a version but doesn't release it - it's not made available to merchants."},"message":{"name":"message","type":"option","description":"Optional message that will be associated with this version. This is for internal use only and won't be available externally.","multiple":false},"version":{"name":"version","type":"option","description":"Optional version tag that will be associated with this app version. If not provided, an auto-generated identifier will be generated for this app version.","multiple":false},"source-control-url":{"name":"source-control-url","type":"option","description":"URL associated with the new app version.","multiple":false}},"args":{}},"app:dev":{"id":"app:dev","description":"Run the app.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"api-key":{"name":"api-key","type":"option","description":"The API key of your app.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID of your app.","multiple":false},"store":{"name":"store","type":"option","description":"Store URL. Must be an existing development or Shopify Plus sandbox store.","multiple":false},"reset":{"name":"reset","type":"boolean","description":"Reset all your settings."},"skip-dependencies-installation":{"name":"skip-dependencies-installation","type":"boolean","description":"Skips the installation of dependencies. Deprecated, use workspaces instead."},"no-update":{"name":"no-update","type":"boolean","description":"Skips the Partners Dashboard URL update step."},"subscription-product-url":{"name":"subscription-product-url","type":"option","description":"Resource URL for subscription UI extension. Format: \"/products/{productId}\"","multiple":false},"checkout-cart-url":{"name":"checkout-cart-url","type":"option","description":"Resource URL for checkout UI extension. Format: \"/cart/{productVariantID}:{productQuantity}\"","multiple":false},"tunnel-url":{"name":"tunnel-url","type":"option","description":"Use a custom tunnel, it must be running before executing dev. Format: \"https://my-tunnel-url:port\".","multiple":false},"no-tunnel":{"name":"no-tunnel","type":"boolean","description":"Automatic creation of a tunnel is disabled. Service entry point will listen to localhost instead"},"theme":{"name":"theme","type":"option","description":"Theme ID or name of the theme app extension host theme.","multiple":false},"theme-app-extension-port":{"name":"theme-app-extension-port","type":"option","description":"Local port of the theme app extension development server.","multiple":false},"notify":{"name":"notify","type":"option","description":"The file path or URL. The file path is to a file that you want updated on idle. The URL path is where you want a webhook posted to report on file changes.","multiple":false}},"args":{}},"app:import-flow-legacy-extensions":{"id":"app:import-flow-legacy-extensions","description":"Import dashboard-managed flow extensions into your app.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID of your app.","multiple":false}},"args":{}},"app:info":{"id":"app:info","description":"Print basic information about your app and extensions.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"json":{"name":"json","type":"boolean","description":"format output as JSON"},"web-env":{"name":"web-env","type":"boolean","description":"Outputs environment variables necessary for running and deploying web/."}},"args":{}},"app:release":{"id":"app:release","description":"Release an app version.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"api-key":{"name":"api-key","type":"option","description":"The API key of your app.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID of your app.","multiple":false},"reset":{"name":"reset","type":"boolean","description":"Reset all your settings."},"version":{"name":"version","type":"option","description":"The name of the app version to release.","multiple":false}},"args":{}},"app:update-url":{"id":"app:update-url","description":"Update your app and redirect URLs in the Partners Dashboard.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"api-key":{"name":"api-key","type":"option","description":"The API key of your app.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID of your app.","multiple":false},"app-url":{"name":"app-url","type":"option","description":"URL through which merchants will access your app.","multiple":false},"redirect-urls":{"name":"redirect-urls","type":"option","description":"Comma separated list of allowed URLs where merchants are redirected after the app is installed","multiple":false}},"args":{}},"webhook:trigger":{"id":"webhook:trigger","description":"Trigger delivery of a sample webhook topic payload to a designated address.","flags":{"help":{"name":"help","type":"boolean","description":"This help. When you run the trigger command the CLI will prompt you for any information that isn't passed using flags."},"topic":{"name":"topic","type":"option","description":"The requested webhook topic.","multiple":false},"api-version":{"name":"api-version","type":"option","description":"The API Version of the webhook topic.","multiple":false},"delivery-method":{"name":"delivery-method","type":"option","description":"Method chosen to deliver the topic payload. If not passed, it's inferred from the address.","multiple":false},"shared-secret":{"name":"shared-secret","type":"option","description":"Deprecated. Please use client-secret.","multiple":false},"client-secret":{"name":"client-secret","type":"option","description":"Your app's client secret. This secret allows us to return the X-Shopify-Hmac-SHA256 header that lets you validate the origin of the response that you receive.","multiple":false},"address":{"name":"address","type":"option","description":"The URL where the webhook payload should be sent.\n                    You will need a different address type for each delivery-method:\n                          · For remote HTTP testing, use a URL that starts with https://\n      · For local HTTP testing, use http://localhost:{port}/{url-path}\n                          · For Google Pub/Sub, use pubsub://{project-id}:{topic-id}\n                          · For Amazon EventBridge, use an Amazon Resource Name (ARN) starting with arn:aws:events:","multiple":false}},"args":{}},"app:config:link":{"id":"app:config:link","description":"Fetch your app configuration from the Partner Dashboard.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID of your app.","multiple":false}},"args":{}},"app:config:push":{"id":"app:config:push","description":"Push your app configuration to the Partner Dashboard.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"force":{"name":"force","type":"boolean","description":"Push configuration without asking for confirmation."}},"args":{}},"app:config:use":{"id":"app:config:use","description":"Activate an app configuration.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"reset":{"name":"reset","type":"boolean","description":"Reset current configuration."}},"args":{"config":{"name":"config","description":"The name of the app configuration. Can be 'shopify.app.staging.toml' or simply 'staging'."}}},"app:env:pull":{"id":"app:env:pull","description":"Pull app and extensions environment variables.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"env-file":{"name":"env-file","type":"option","description":"Specify an environment file to update if the update flag is set","multiple":false}},"args":{}},"app:env:show":{"id":"app:env:show","description":"Display app and extensions environment variables.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false}},"args":{}},"app:function:build":{"id":"app:function:build","description":"Compile a Function to WASM.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your function directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false}},"args":{}},"app:function:run":{"id":"app:function:run","description":"Run a Function locally for testing.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your function directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"json":{"name":"json","type":"boolean","description":"Log the run result as a JSON object."}},"args":{}},"app:function:schema":{"id":"app:function:schema","description":"Fetch the latest GraphQL schema for a Function.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your function directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"api-key":{"name":"api-key","type":"option","description":"The API key to fetch the schema with.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID to fetch the schema with.","multiple":false},"stdout":{"name":"stdout","type":"boolean","description":"Output the schema to stdout instead of writing to a file."}},"args":{}},"app:function:typegen":{"id":"app:function:typegen","description":"Generate GraphQL types for a JavaScript Function.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your function directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false}},"args":{}},"app:generate:extension":{"id":"app:generate:extension","description":"Scaffold an Extension.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"type":{"name":"type","type":"option","description":"Deprecated. Please use --template","multiple":false},"template":{"name":"template","type":"option","description":"Extension template","multiple":false},"name":{"name":"name","type":"option","description":"name of your Extension","multiple":false},"clone-url":{"name":"clone-url","type":"option","description":"The Git URL to clone the function extensions templates from. Defaults to: https://github.com/Shopify/function-examples","multiple":false},"flavor":{"name":"flavor","type":"option","description":"Choose a starting template for your extension, where applicable","multiple":false},"reset":{"name":"reset","type":"boolean","description":"Reset all your settings."},"api-key":{"name":"api-key","type":"option","description":"The API key of your app.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID of your app.","multiple":false}},"args":{"file":{"name":"file"}}},"app:generate:schema":{"id":"app:generate:schema","description":"Fetch the latest GraphQL schema for a Function.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your function directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"api-key":{"name":"api-key","type":"option","description":"The API key to fetch the schema with.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID to fetch the schema with.","multiple":false},"stdout":{"name":"stdout","type":"boolean","description":"Output the schema to stdout instead of writing to a file."}},"args":{}},"app:scaffold:extension":{"id":"app:scaffold:extension","description":"Scaffold an Extension.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"type":{"name":"type","type":"option","description":"Deprecated. Please use --template","multiple":false},"template":{"name":"template","type":"option","description":"Extension template","multiple":false},"name":{"name":"name","type":"option","description":"name of your Extension","multiple":false},"clone-url":{"name":"clone-url","type":"option","description":"The Git URL to clone the function extensions templates from. Defaults to: https://github.com/Shopify/function-examples","multiple":false},"flavor":{"name":"flavor","type":"option","description":"Choose a starting template for your extension, where applicable","multiple":false},"reset":{"name":"reset","type":"boolean","description":"Reset all your settings."},"api-key":{"name":"api-key","type":"option","description":"The API key of your app.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID of your app.","multiple":false}},"args":{"file":{"name":"file"}}},"app:versions:list":{"id":"app:versions:list","description":"List deployed versions of your app.","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"path":{"name":"path","type":"option","description":"The path to your app directory.","multiple":false,"default":"."},"config":{"name":"config","type":"option","description":"The name of the app configuration.","multiple":false},"api-key":{"name":"api-key","type":"option","description":"Application's API key to fetch versions for.","multiple":false},"client-id":{"name":"client-id","type":"option","description":"The Client ID to fetch versions for.","multiple":false}},"args":{"file":{"name":"file"}}},"upgrade":{"id":"upgrade","description":"Upgrade the Shopify CLI.","flags":{"path":{"name":"path","type":"option","description":"The path to your project directory.","multiple":false,"default":"."}},"args":{}},"version":{"id":"version","description":"Shopify CLI version.","flags":{},"args":{}},"auth:logout":{"id":"auth:logout","description":"Logout from Shopify.","flags":{},"args":{}},"debug:command-flags":{"id":"debug:command-flags","description":"View all the available command flags","flags":{"csv":{"name":"csv","type":"boolean","description":"Output as CSV"}},"args":{}},"demo:catalog":{"id":"demo:catalog","description":"Browse the catalog for steps","flags":{},"args":{}},"demo:generate-file":{"id":"demo:generate-file","description":"Create a command design file","flags":{"path":{"name":"path","type":"option","description":"The directory for generating the demo file.","multiple":false,"default":"."},"file":{"name":"file","type":"option","description":"The name of the demo file.","multiple":false}},"args":{}},"demo":{"id":"demo","description":"Demo a command design defined in a file","flags":{"file":{"name":"file","type":"option","description":"The path to the design file.","multiple":false,"default":"."}},"args":{}},"demo:print-ai-prompt":{"id":"demo:print-ai-prompt","description":"Prints the prompts for a chat-enabled LLM to generate a demo","flags":{},"args":{}},"kitchen-sink:async":{"id":"kitchen-sink:async","description":"View the UI kit components that process async tasks","flags":{},"args":{}},"kitchen-sink":{"id":"kitchen-sink","description":"View all the available UI kit components","flags":{},"args":{}},"kitchen-sink:prompts":{"id":"kitchen-sink:prompts","description":"View the UI kit components prompts","flags":{},"args":{}},"kitchen-sink:static":{"id":"kitchen-sink:static","description":"View the UI kit components that display static output","flags":{},"args":{}},"plugins":{"id":"plugins","flags":{},"args":{}},"init":{"id":"init","flags":{"no-color":{"name":"no-color","type":"boolean","description":"Disable color output."},"verbose":{"name":"verbose","type":"boolean","description":"Increase the verbosity of the logs."},"name":{"name":"name","type":"option","multiple":false},"path":{"name":"path","type":"option","multiple":false,"default":"."},"template":{"name":"template","type":"option","description":"The app template. Accepts one of the following:\n       - <remix|none>\n       - Any GitHub repo with optional branch and subpath, e.g., https://github.com/Shopify/<repository>/[subpath]#[branch]","multiple":false},"package-manager":{"name":"package-manager","type":"option","multiple":false},"local":{"name":"local","type":"boolean"}},"args":{}}},"docs":{"https://shopify.dev/docs/apps/tools/cli":"On this page FeaturesRequirementsGetting startedCommand referenceApp structureUsing Shopify CLI for continuous integrationUpgrade Shopify CLIMigrate to Shopify CLI 3.xUsage reportingContributing to Shopify CLIWhere to get help Shopify CLI for apps Shopify CLI is a command-line interface tool that helps you build Shopify apps. It quickly generates Shopify apps and generates app extensions. You can also use it to automate many common development tasks. You need to use Node.js to install Shopify CLI and manage its dependencies. However, you can use any technology stack to build your app&#39;s functionality. This documentation explains how to use Shopify CLI for app development. To learn how to use Shopify CLI for other tasks, refer to the following documentation: Shopify CLI for themes Shopify CLI for Hydrogen storefronts FeaturesAnchor link to section titled \"Features\" Shopify CLI accelerates your app development process with the following features: Creates new apps using app templates Generates app extensions in your app Creates app records in the Partner Dashboard Builds your app and extensions, and creates a tunnel to let you preview your work in a development store Deploys your app extensions RequirementsAnchor link to section titled \"Requirements\" You&#39;ve installed Node.js 16 or higher . You&#39;ve installed a Node.js package manager:  either npm, Yarn 1.x, or pnpm. You&#39;ve installed Git 2.28.0 or higher. You&#39;re using the latest version of Chrome or Firefox. Getting startedAnchor link to section titled \"Getting started\" Shopify CLI is managed as a set of Node.js packages: @shopify/cli @shopify/app If you&#39;re building a Shopify app, then you don&#39;t need to install Shopify CLI globally. Instead, these packages should be added as dependencies of your app. Using Shopify CLI this way enables a consistent development experience across environments. Because Shopify CLI requires a conventional directory structure, if you&#39;re creating a new app, then you should run one of the following commands to initialize your app: Tip You can specify the app template that you want to use with the --template flag. You can specify a Shopify app template, or pass a URL to a template hosted in GitHub. Refer to the following tutorials for additional details about creating an app that works with Shopify CLI, or to learn how to work on an existing app that uses Shopify CLI 3.0 or higher: Create an app Learn how to set up your app development environment and start building. QR Code Example App After creating your first app follow this in depth tutorial to gain experience with the most popular Shopify APIs, tools, and libraries. Work on an existing app Learn how to set up your development environment to collaborate on an app with others. Command referenceAnchor link to section titled \"Command reference\" Refer to the Shopify CLI app command reference to explore the commands available to build apps with Shopify CLI. App structureAnchor link to section titled \"App structure\" To offer a better and more integrated development experience, apps created using Shopify CLI follow a conventional directory structure. This structure allows you to serve and deploy your app and its app extensions at the same time, easily generate new app extensions, and manage all of your app&#39;s dependencies in one place. Learn more about the structure of apps built with Shopify CLI. Using Shopify CLI for continuous integrationAnchor link to section titled \"Using Shopify CLI for continuous integration\" If you have an app extension that you want to deploy to Shopify regularly, then you can integrate Shopify CLI into your CI/CD pipeline to programmatically deploy your app components using the deploy command. Learn more about running Shopify CLI in a CI/CD pipeline. Upgrade Shopify CLIAnchor link to section titled \"Upgrade Shopify CLI\" To upgrade Shopify CLI 3.x to the latest version, use the upgrade command: To check your CLI version, use the version command: If the version command doesn&#39;t return a version number, or the upgrade command fails, then you might be using the previous version of Shopify CLI. To work on an existing app with the newest version of Shopify CLI, you need to migrate your app. Alternatively, you can create a new app that uses Shopify CLI as a dependency. Migrate to Shopify CLI 3.xAnchor link to section titled \"Migrate to Shopify CLI 3.x\" To offer a better and more integrated development experience, apps created Shopify CLI 3.x follow a conventional directory structure and manage your Node-based dependencies for you. If you have an app that was created using a previous version of Shopify CLI, or without Shopify CLI, then you can migrate your app so you can use the newest version of Shopify CLI. Usage reportingAnchor link to section titled \"Usage reporting\" Anonymous usage statistics are collected by default. To opt out, you can use the environment variable SHOPIFY_CLI_NO_ANALYTICS=1. Contributing to Shopify CLIAnchor link to section titled \"Contributing to Shopify CLI\" Shopify CLI is open source. Learn how to contribute to our GitHub repository. Where to get helpAnchor link to section titled \"Where to get help\" Open a GitHub issue - To report bugs or request new features, open an issue in the Shopify CLI repository. Shopify Community Forums - Visit our forums to connect with the community and learn more about Shopify CLI development. On this page FeaturesRequirementsGetting startedCommand referenceApp structureUsing Shopify CLI for continuous integrationUpgrade Shopify CLIMigrate to Shopify CLI 3.xUsage reportingContributing to Shopify CLIWhere to get help","https://shopify.dev/docs/apps/tools/cli/commands":"On this page Command overviewCommand syntaxdevinfogenerate extensionfunction buildfunction runfunction schemafunction typegenbuilddeployenv pullenv showupdate-urlconfig autocorrectauth logoutwebhook triggerhelpversionupgrade Shopify CLI commands for apps This reference lists the commands that you can use to build apps with Shopify CLI. Command overviewAnchor link to section titled \"Command overview\" Topic Command Description app dev Builds the app and lets you preview it on a development store or Plus sandbox store. info Displays information about your app. generate extension Creates a new app extension for your app. function build Compiles the function in your current directory to WebAssembly (Wasm) for testing purposes. function run Runs the function from your current directory for testing purposes. function schema Generates the latest GraphQL schema for a function in your app. function typegen Creates GraphQL types based on your input query for a function written in JavaScript. build Builds the app, including extensions. deploy Builds the app and deploys all of the extensions in your app to Shopify. env Stores or displays environment variables required for app deployment. update-url Updates the app URL and allowed redirection URLs for your app. config autocorrect Enables or disables command autocorrection. auth logout Logs you out of your Shopify Partner account. webhook trigger Triggers the delivery of a sample event topic payload to a designated address. none help Lists the available commands and describes what they do. version Lists the version of Shopify CLI included in the project. upgrade Upgrades the @shopify/cli and @shopify/app packages to their latest versions. Command syntaxAnchor link to section titled \"Command syntax\" Shopify CLI commands should only be run in a project where Shopify CLI is installed. You can run all Shopify CLI commands using the run command: You can also run some commands as scripts, which use an abbreviated syntax: Some package managers require a separator to pass flags to the script: devAnchor link to section titled \"dev\" Builds the app and lets you preview it on a development store or Plus sandbox store. To preview your app on a development store or Plus sandbox store, Shopify CLI walks you through the following steps. If you&#39;ve run dev before, then your settings are saved and some of these steps are skipped: Associating your project with an app associated with your Partner account or organization, or creating a new app. Selecting a development store or Plus sandbox store to use for testing. If you have only one store, then it&#39;s selected automatically. Installing your app on the store using the provided install link. Creating a tunnel between your local environment and the store using Cloudflare. You can use your own tunneling software instead, by passing your tunnel URL with the --tunnel-url flag. Updating the app URLs that are set in the Partner Dashboard. To avoid overwriting any URLs that are already set, select the No or Never option. If you select one of these options, then you&#39;re provided with URLs that you can manually add in the Partner Dashboard so you can preview your app. Building and serving your app and app extensions. If you&#39;re using the PHP or Ruby app template, then you need to complete the following steps before you can preview your app for the first time: PHP: Set up your Laravel app Ruby: Set up your Rails app Note dev is an alias for shopify app dev. Note The following types of extensions can&#39;t be previewed using the dev command: Extensions that use Shopify Functions, including discount extensions To preview these extension types, deploy them to a development copy of your app. Caution To use a development store or Plus sandbox store with Shopify CLI, you need to be the store owner, or have a staff account on the store. Staff accounts are created automatically the first time you access a development store with your Partner staff account through the Partner Dashboard. dev flagsAnchor link to section titled \"dev flags\" Flag Alias Description --tunnel-url The URL of a tunnel that you&#39;ve started using your own local tunneling software. Shopify recommends Cloudflare tunnel for use with Shopify CLI.Expected format: https://my-tunnel-url:port --store &lt;store&gt; -s &lt;store&gt; The development store or Plus sandbox store that you want to use to preview your app.The --store flag accepts the following inputs:The store prefix (johns-apparel)The myshopify.com URL (johns-apparel.myshopify.com, https://johns-apparel.myshopify.com) --client-id &lt;id&gt; The client ID of your app. Use this flag to specify the app that you want connect your project with. This flag replaces the deprecated --api-key flag. --no-update Skip the prompt to update the app URLs that are set in the Partner Dashboard. Your URLs won&#39;t be updated. --path &lt;path&gt; The path to your app directory. --skip-dependencies-installation Skip checking and installing missing dependencies for your app. --reset Reset all of your dev settings and send an uninstall request for the store to the default webhook endpoint (/api/webhooks), or the endpoint defined in shopify.web.toml. --verbose Provide more detailed output in the logs. --no-color Disables color output in the logs. --checkout-cart-url A partial link with a product variant ID and quantity to be used to create a test checkout for checkout UI extensions. If the flag isn&#39;t passed, then Shopify CLI auto-populates this value. To test with a specific product variant ID and quantity, you can provide the flag as --checkout-cart-url &quot;/cart/12345:1&quot;, where 12345 is the product variant ID and :1 is the quantity. --subscription-product-url A partial link with a product ID. Use this flag to specify the product to use when testing a purchase option extension. If the flag isn&#39;t passed, then Shopify CLI auto-populates this value. To test with a specific product ID, you can provide the flag as --subscription-product-url &quot;/products/12345&quot;, where 12345 is the product ID. --theme-app-extension-port &lt;port&gt; The local port to be used to test a theme app extension. --theme &lt;ID or name&gt; -t The ID or name of the theme to be used to test a theme app extension.If no theme is specified, then the command will use Dawn, Shopify&#39;s example theme, when testing your theme app extension. infoAnchor link to section titled \"info\" Displays information about your app. The information returned includes the following: The app and development store or Plus sandbox store that&#39;s used when you run the dev command. You can reset these configurations using dev --reset. The structure of your app project. The access scopes your app has requested. System information, including the package manager and version of Shopify CLI used in the project. info flagsAnchor link to section titled \"info flags\" Flag Description --path &lt;path&gt; The path to your app directory. --verbose Provide more detailed output in the logs. --no-color Disables color output in the logs. --json Output the app info in JSON format. generate extensionAnchor link to section titled \"generate extension\" Generates a new app extension. For a list of app extension types that you can generate using this command, refer to Supported extension types. Each new app extension is created in a folder under extensions/. To learn more about the extensions file structure, refer to App structure and the documentation for your extension type. generate extension flagsAnchor link to section titled \"generate extension flags\" Flag Alias Description --name &lt;name&gt; -n &lt;name&gt; The name of your extension. --type &lt;type&gt; -t &lt;type&gt; The extension type. See the list of app extensions. --path &lt;path&gt; The path to your app directory. --verbose Provides more detailed output in the logs. --no-color Disables color output in the logs. --template Choose the language of the template that you want to start with. This flag is only supported for post-purchase and subscription app extensions.Accepted values: vanilla-js or react Supported extension typesAnchor link to section titled \"Supported extension types\" Extension type type flag value Checkout UI checkout_ui Post-purchase UI post_purchase_ui Subscription UI subscription_ui Theme app extension theme_app_extension Web pixel web_pixel Order discount order_discounts Product discount product_discounts Shipping discount shipping_discounts Delivery customization delivery_customization Payment customization payment_customization Order routing location rule order_routing_location_rule Cart and checkout validation cart_checkout_validation Cart transform cart_transform Fulfillment constraints fulfillment_constraints Tip The type flag value also appears in the type field of your extension&#39;s TOML configuration file. function buildAnchor link to section titled \"function build\" Compiles the function in your current directory to WebAssembly (Wasm) for testing purposes. function build flagsAnchor link to section titled \"function build flags\" Flag Description --path &lt;path&gt; The path to your function directory. --verbose Increase the verbosity of the logs. --no-color Disables color output in the logs. function runAnchor link to section titled \"function run\" Runs the function from your current directory for testing purposes. function run flagsAnchor link to section titled \"function run flags\" Flag Alias Description --json -j Output the function result in JSON format. --path &lt;path&gt; The path to your function directory. --verbose Increase the verbosity of the logs. --no-color Disables color output in the logs. function schemaAnchor link to section titled \"function schema\" Note This command replaces the shopify app generate schema command. Generates the latest GraphQL schema for a function in your app. Run this command from the function directory. This command uses the API type and version of your function, as defined in your extension TOML file, to generate the latest GraphQL schema. The schema is written to the schema.graphql file. function schema flagsAnchor link to section titled \"function schema flags\" Flag Description --client-id The client ID of your app. This flag replaces the deprecated --api-key flag. --path &lt;path&gt; The path to your function directory. --stdout Output the schema to STDOUT instead of schema.graphql. --verbose Increase the verbosity of the logs. --no-color Disables color output in the logs. function typegenAnchor link to section titled \"function typegen\" Creates GraphQL types based on your input query for a function written in JavaScript. function typegen flagsAnchor link to section titled \"function typegen flags\" Flag Description --path &lt;path&gt; The path to your function directory. --verbose Increase the verbosity of the logs. --no-color Disables color output in the logs. buildAnchor link to section titled \"build\" Builds the app, including extensions. This command executes the build script specified in the element&#39;s TOML file. You can specify a custom script in the file. To learn about configuration files in Shopify apps, refer to App structure. If you&#39;re building a theme app extension, then running the build command runs Theme Check against your extension to ensure that it&#39;s valid. Note build is an alias for shopify app build. build flagsAnchor link to section titled \"build flags\" Flag Description --client-id Specify the client ID to use when building the app. This client ID is set as an environment variable, which is used by App Bridge. This flag is only required when building your app for production.This flag replaces the deprecated --api-key flag. --skip-dependencies-installation Skip checking and installing missing dependencies for your app. --path &lt;path&gt; The path to your app directory. --verbose Increase the verbosity of the logs. --no-color Disables color output in the logs. deployAnchor link to section titled \"deploy\" Builds the app and deploys app extensions. If your app contains any versioned app extensions, then you need to navigate to your app in the Partner Dashboard to version and publish the extensions after you run this command. The deployment process includes the following steps. If you&#39;ve run dev or deploy before, then some of these steps are skipped. Associating your project with an app associated with your Partner account or organization, or creating a new app. Registering any unregistered extensions with the app Building the app Bundling any app extensions and performing validations on the bundle Displaying a confirmation prompt with a summary of the deploy Pushing the bundle to Shopify This command doesn&#39;t deploy your web app. When you&#39;re ready to deploy your app, you need to deploy these components to your own hosting solution. Learn more about deploying your web app. Note deploy is an alias for shopify app deploy. deploy flagsAnchor link to section titled \"deploy flags\" Flag Description -f, --force Skips confirmation prompts. --client-id &lt;id&gt; The client ID of your app. This flag replaces the deprecated --api-key flag. --reset Resets all of your deploy settings. --path &lt;path&gt; The path to your app directory. --verbose Provide more detailed output in the logs. --no-color Disables color output in the logs. env pullAnchor link to section titled \"env pull\" Creates or updates an .env files that contains app and app extension environment variables. When an existing .env file is updated, changes to the variables are displayed in the terminal output. Existing variables and commented variables are preserved. env pull flagsAnchor link to section titled \"env pull flags\" Flag Description --env-file Specify the file where environment variables are saved. If the file doesn&#39;t exist, then it will be created. --path &lt;path&gt; The path to your app directory. --verbose Provide more detailed output in the logs. --no-color Disables color output in the logs. env showAnchor link to section titled \"env show\" Displays environment variables that can be used to deploy apps and app extensions. env show flagsAnchor link to section titled \"env show flags\" Flag Description --path &lt;path&gt; The path to your app directory. --verbose Provide more detailed output in the logs. --no-color Disables color output in the logs. update-urlAnchor link to section titled \"update-url\" Updates the app URL and allowed redirection URLs for your app. When you specify URLs using this command, the current URLs are overwritten. Your current app URLs are provided as placeholder responses. To keep either your app URL or redirect URLs the same, submit the placeholder content. Alternatively, use the --app-url or --redirect-urls flag to update only one of these settings. update-url flagsAnchor link to section titled \"update-url flags\" Flag Description --client-id The client ID of your app. Use this flag to specify the app that you want to update. This flag replaces the deprecated --api-key flag. --app-url The new app URL for the app. --redirect-urls A comma-separated list of the new allowed redirection URL or URLs for the app. --path &lt;path&gt; The path to your app directory. --verbose Provide more detailed output in the logs. --no-color Disables color output in the logs. config autocorrectAnchor link to section titled \"config autocorrect\" Enables or disables command autocorrection. By default, autocorrect is off. When autocorrection is enabled, Shopify CLI automatically runs a corrected version of your command if a correction is available. When autocorrection is disabled, you need to confirm that you want to run corrections for mistyped commands. Command Description on Enable autocorrect. off Disable autocorrect. status Check whether autocorrect is enabled or disabled. auth logoutAnchor link to section titled \"auth logout\" Logs you out of the Shopify account or Partner account and store. webhook triggerAnchor link to section titled \"webhook trigger\" Triggers the delivery of a sample Admin API event topic payload to a designated address. You should use this command to experiment with webhooks, to initially test your webhook configuration, or for unit testing. However, to test your webhook configuration from end to end, you should always trigger webhooks by performing the related action in Shopify. Because most webhook deliveries use remote endpoints, you can trigger the command from any directory where you can use Shopify CLI, and send the webhook to any of the supported endpoint types. For example, you can run the command from your app&#39;s local directory, but send the webhook to a staging environment endpoint. To learn more about using webhooks in a Shopify app, refer to Webhooks overview. LimitationsAnchor link to section titled \"Limitations\" Webhooks triggered using this method always have the same payload, so they can&#39;t be used to test scenarios that differ based on the payload contents. Webhooks triggered using this method aren&#39;t retried when they fail. Trigger requests are rate-limited using the Partner API rate limit. You can&#39;t use this method to validate your API webhook subscriptions. webhook trigger flagsAnchor link to section titled \"webhook trigger flags\" Flag Description --topic &lt;topic&gt; The requested event topic. You can pass the webhook topic using the GraphQL enum value or the webhook topic name. For example, you can request the orders/create webhook topic by passing ORDERS_CREATE (GraphQL API style) or orders/create (REST API style).For a complete list of topics, refer to the GraphQL Admin API reference, the REST Admin API reference, and the Mandatory webhooks guide. --api-version &lt;version&gt; API version of the event topic, in the format YYYY-MM or unstable. If the topic isn&#39;t available in the specified version, then the webhook payload isn&#39;t sent. --client-secret &lt;value&gt; Your app&#39;s client secret. This secret is used to generate and return a X-Shopify-Hmac-SHA256 header, which lets you validate the origin of the response that you receive. --delivery-method &lt;option&gt; The method chosen to deliver the topic payload. Options: http, google-pub-sub, event-bridge --address &lt;address&gt; The URL where the webhook payload should be sent.For each delivery method, you need to provide a different address type:http: For remote delivery, use an https:// address. For local delivery, use http://localhost:{port}/{url-path}.google-pub-sub: A pubsub URL, in the format pubsub://{project-id}:{topic-id}event-bridge: An Amazon Resource Name (ARN) starting with arn:aws:events: helpAnchor link to section titled \"help\" Lists the available commands and describes what they do. You can add a help flag to any command to learn more about it. Use --help or -h. versionAnchor link to section titled \"version\" Lists the version of Shopify CLI included in the project. If nothing is returned from this command, then your project isn&#39;t using Shopify CLI 3.0 or higher, and you might need to migrate. upgradeAnchor link to section titled \"upgrade\" Shopify CLI acts as a dependency of your app. This command upgrades the @shopify/cli and @shopify/app dependencies to their latest versions. upgrade flagsAnchor link to section titled \"upgrade flags\" Flag Description --path &lt;path&gt; The path to your app directory. On this page Command overviewCommand syntaxdevinfogenerate extensionfunction buildfunction runfunction schemafunction typegenbuilddeployenv pullenv showupdate-urlconfig autocorrectauth logoutwebhook triggerhelpversionupgrade","https://shopify.dev/docs/apps/tools/cli/structure":"On this page Directory structureRoot configuration fileWeb componentsExtensionsDependency management App structure To offer a better and more integrated development experience, apps created using Shopify CLI 3.x follow a conventional directory structure. This structure allows you to serve and deploy your app and its app extensions at the same time, and generate new app extensions easily. Shopify CLI also manages any Node-based dependencies for you, including your Shopify CLI version. This leads to a consistent app development experience across environments. Tip If you have an app that was created using a previous version of Shopify CLI, or without Shopify CLI, then you can migrate your app. Refer to Migrate your app to Shopify CLI 3.x to learn how to update your app to follow this structure. Directory structureAnchor link to section titled \"Directory structure\" All apps created with Shopify CLI follow the same basic directory structure. Some elements might be included or omitted depending on your app&#39;s functionality.                  File/directory Required?       Description                       shopify.app.toml Yes       A file containing metadata and configurations for your project. This file represents the root of the app.                 package.json Yes       A file containing Node-specific metadata about your project. Includes project dependencies and scripts that let you run Shopify CLI commands using your package manager. Depending on your project structure or template, you might have additional `package.json` files in your project subfolders.                 Web component directory (default: web/) No       The recommended directory for the web components for your app. Use this directory if you want to build a web interface to display in the Shopify admin or Shopify POS using Shopify App Bridge. These components can be made up of one or more processes.                 extensions/ directory No       Any app extensions that you've generated in your app. Each directory under extensions/ represents an extension, where the extension's local identifier is the name of the directory.Each extension's directory must contain the appropriate configuration file for the extension type.                 env No       A file containing the UUIDs for your app and each extension in the app.         Root configuration fileAnchor link to section titled \"Root configuration file\" shopify.app.toml is a configuration file that contains app-level configurations and metadata. This file also helps Shopify CLI determine whether the directory represents a Shopify app. Property Required? Description name Yes The name of your app. scopes No Any access scopes that you require for the parts of your app that are embedded in the Shopify admin or Shopify POS. extension_directories No A list of glob patterns pointing to directories that contain extensions. web_directories No A list of glob patterns pointing to directories that contain web components. Use this property to explicitly specify the directories to check for shopify.web.toml files. Web componentsAnchor link to section titled \"Web components\" A directory containing the web components for your app. For new apps created with Shopify CLI 3.x, this directory is called web/. Use this directory if you want to build a web interface to display in the Shopify admin or Shopify POS using Shopify App Bridge. The web interface can consist of one process or multiple processes. For example, you might have one process if you have a standard Rails app with an asset pipeline, or you might have multiple processes if your web app has independent frontend and backend stacks. To learn more about the conventions for single-process and multiple-process apps, refer to Web component conventions. Tip The default location for web components is the web/ subdirectory. Keeping your web components in a subdirectory like web/ helps to keep your project organized. However, the CLI supports having the web component at the root of the project or any subdirectory of your choice. To use a different subdirectory or the project root for your web components, include the shopify.web.toml file in the directory. shopify.web.tomlAnchor link to section titled \"shopify.web.toml\" A configuration file where you can define properties for your embedded app. The location of this file identifies your web component directory to the CLI. When you create an app using a template that contains an embedded app, the shopify.web.toml file is created in the web/ directory. If you choose to store your web components at the project root, or in another subdirectory, you need to include a shopify.web.toml in that directory instead. If you need to override the build or dev command to build or preview your web app, then you can provide your own command at this level. In projects where you want to serve the web backend and frontend through two processes, you can create a shopify.web.toml for each process. The CLI can start the two processes, and expects the frontend web HTTP server to forward the traffic to the backend process. To learn more, refer to Web component conventions. To explicitly specify the folders where Shopify CLI should look for shopify.web.toml files, and to avoid files being loaded twice due to symlinks, use the web_directories variable in the shopify.app.toml file. Property Required? Description Values roles No List of one or more roles of the process in the directory. If your project uses only one process, then you don&#39;t need to specify a value. This property replaces the deprecated type property. [&quot;frontend&quot;, &quot;backend&quot;, &quot;background&quot;] auth_callback_path No Overrides the allowed redirection URLs set in the Partner Dashboard when you run your app. Use this property if your app uses a custom path to handle OAuth callbacks. You can specify a single path, or multiple paths separated by commas. webhooks_path No The root path for your app&#39;s webhook endpoints. If you run the dev command with a --reset flag, then Shopify CLI sends an UNINSTALLED webhook request for the selected store to this endpoint. If this value isn&#39;t set, then the default value of /api/webhooks is used. port No Specifies which port to use to run your frontend or backend process. If you don&#39;t specify a port, then a random one is assigned when you run dev. commands.build No The command to build the app. This command is run when you run the Shopify CLI build command. It&#39;s executed from the configuration file&#39;s directory. commands.dev Yes The command to serve the app. This command is run when you run the Shopify CLI dev command. This command is executed from the configuration file&#39;s directory. type (deprecated) No The role of the process in the directory. If your project uses only one process, then you don&#39;t need to specify a value. frontend, backend Web component conventionsAnchor link to section titled \"Web component conventions\" Shopify CLI builds and serves the various parts of your app using the following conventions, some of which use information that is defined in configuration files. Single process or frontend processAnchor link to section titled \"Single process or frontend process\" The following conventions apply to apps that run on a single process, such as standard Rails apps, and to the frontend process of apps that have both a frontend and backend process. ConfigurationAnchor link to section titled \"Configuration\" The CLI expects at least one shopify.web.toml configuration file, with roles including frontend, or with no type/roles specified. This file can be at the root of the project, or in a project subdirectory. In the case of a single-process app, include backend in the list of roles as well. To explicitly specify the folders where Shopify CLI should look for shopify.web.toml files, and to avoid files being loaded twice due to symlinks, use the web_directories variable in the shopify.app.toml file. Provided variablesAnchor link to section titled \"Provided variables\" The following information is provided to the process as environment variables: SHOPIFY_API_KEY: The client ID of the app. SHOPIFY_API_SECRET: The client secret of the app. HOST/APP_URL: The URL that stores will load. PORT/FRONTEND_PORT/SERVER_PORT: The port in which the process’ server should run. SCOPES: The app&#39;s access scopes. BACKEND_PORT: The port in which the second, or backend, process will run if the app is a two-process app. The frontend uses &#39;BACKEND_PORT&#39; to proxy traffic to the backend process. Second process or backend processAnchor link to section titled \"Second process or backend process\" The following conventions apply to the backend process of two-process apps, or to single-process apps. ConfigurationAnchor link to section titled \"Configuration\" The CLI expects a shopify.web.toml configuration file in any subdirectory of the project, with roles including backend. The frontend must proxy backend requests to the backend port defined in the environment variable BACKEND_PORT. Provided variablesAnchor link to section titled \"Provided variables\" The following information will be provided as environment variables to the process: SHOPIFY_API_KEY: The client ID of the app. SHOPIFY_API_SECRET: The client secret of the app. HOST/APP_URL: The URL that stores will load. SERVER_PORT/BACKEND_PORT/PORT: The port in which the process’s server should run. SCOPES: The app&#39;s access scopes. FRONTEND_PORT: The port in which the frontend process will run. Background processAnchor link to section titled \"Background process\" You can also specify additional processes that will run in the background and don&#39;t require the behavior of frontend or backend processes. This can be useful for service-oriented architectures or custom file-watcher processes. ConfigurationAnchor link to section titled \"Configuration\" The CLI accepts a shopify.web.toml configuration file in any subdirectory of the project, with roles = [&quot;background&quot;]. Provided variablesAnchor link to section titled \"Provided variables\" The following information will be provided as environment variables to the process: SHOPIFY_API_KEY: The client ID of the app. SHOPIFY_API_SECRET: The client secret of the app. HOST/APP_URL: The URL that stores will load. SERVER_PORT/PORT: The port in which the process’s server should run, if the process includes a server. SCOPES: The app&#39;s access scopes. FRONTEND_PORT: The port in which the frontend process will run. BACKEND_PORT: The port in which the second, or backend, process will run, if the app has a backend. ExtensionsAnchor link to section titled \"Extensions\" The extensions/ directory contains any app extensions that you&#39;ve generated onto your app, or that were included in your app template. If your app doesn&#39;t contain any app extensions, then you don&#39;t need this directory. You can add override the default directories using the extension_directories variable in shopify.app.toml. Each extension is created in its own directory. The structure of the extension directory depends on the type of extension. Shopify CLI builds and serves app extensions using information defined in TOML configuration files. Some extension types require specific configurations. To accommodate this, Shopify CLI groups extensions into three main categories, each using a unique TOML config file. Type Supported extensions TOML config file name UI Post-purchase UI, subscription UI, checkout UI, web pixel shopify.ui.extension.toml Function cart and checkout validation, cart transform, delivery customization, fulfillment constraints, order discount, product discount, shipping discount, order routing location rule, payment customization shopify.function.extension.toml Theme Theme app extension shopify.theme.extension.toml UI extensionsAnchor link to section titled \"UI extensions\" Shopify CLI expects a shopify.ui.extension.toml configuration file to exist in the extension&#39;s directory. Some extension types offer additional configuration options. Refer to the documentation for your extension type for more details: Checkout UI Post-purchase UI Subscription UI Web pixel Property Required? Description type Yes The type of extension. Checkout UI: checkout_uiPost-purchase UI: post_purchase_uiSubscription UI: subscription_uiWeb pixel: web_pixel name Yes The name of the extension. Build and deploy processAnchor link to section titled \"Build and deploy process\" The CLI builds UI extensions using ESBuild.It expects an extension script named index.{ts,js,tsx,jsx} to exist in the extension’s directory or the src/ subdirectory. The CLI build process outputs the extension in dist/index.js when running build, and inside a temporary directory when running deploy to prevent past build artifacts from leaking into the deploy bundle. Function extensionsAnchor link to section titled \"Function extensions\" The CLI expects a shopify.function.extension.toml configuration file to exist in the extension&#39;s directory. To learn about this file, refer to Function settings. Build and deploy processAnchor link to section titled \"Build and deploy process\" The CLI runs the command specified in the build.command attribute of the configuration file. It expects the output wasm file to be at dist/index.wasm, unless a different path is set in the build.path attribute. Functions are only built on deployment. Theme extensionsAnchor link to section titled \"Theme extensions\" Shopify CLI expects a shopify.theme.extension.toml configuration file to exist in the extension&#39;s directory. Property Required? Description type Yes The type of extension. The only valid value is theme. name Yes The name of the extension. Build and deploy processAnchor link to section titled \"Build and deploy process\" When building, the CLI runs Theme Check against the theme app extension. Extension type valuesAnchor link to section titled \"Extension type values\" The following extension types map to the following extension type values in the extension TOML file: Extension type Category type value in the TOML file Checkout UI UI checkout_ui Post-purchase UI UI post_purchase_ui Subscription UI UI subscription_ui Web pixel UI web_pixel Theme app extension theme theme_app_extension Cart and checkout validation function cart_checkout_validation Cart transform function cart_transform Delivery customization function delivery_customization Order discount function order_discounts Product discount function product_discounts Shipping discount function shipping_discounts Order routing location rule function order_routing_location_rule Payment customization function payment_customization Fulfillment constraints function fulfillment_constraints Dependency managementAnchor link to section titled \"Dependency management\" Shopify CLI uses workspaces to manage dependencies for various parts of your app project. For example, your app might contain the following: A package.json file at the root of the app project to manage all of the dependencies required by Shopify to load, build, and publish your app, including the following: @shopify/app: Manages all of the dependencies required to build and run a Shopify app and any CLI-managed app extensions. @shopify/cli: The current version of Shopify CLI. A package.json file for each extension that you create. You can change your dependency management configuration if desired. We recommend including the lock files generated by the package manager (yarn.lock, package-lock.json, or pnpm-lock.yaml) in the repository to ensure the same version of these dependencies is used consistently across environments. On this page Directory structureRoot configuration fileWeb componentsExtensionsDependency management","https://shopify.dev/docs/apps/tools/cli/existing":"On this page RequirementsStep 1: Install the project dependenciesStep 2: Verify the installationStep 3: Preview the app Work on an existing app You can collaborate with other developers to build a Shopify CLI app. Caution This tutorial only applies to apps created with Shopify CLI 3 or higher. If you&#39;re using a previous version of Shopify CLI, then consider migrating your app to use the newest version. RequirementsAnchor link to section titled \"Requirements\" You&#39;ve created a Partner account and a development store. You understand how apps fit into Shopify. You&#39;ve installed Node.js 16 or higher . You&#39;ve installed a Node.js package manager:  either npm, Yarn 1.x, or pnpm. You&#39;ve installed Git 2.28.0 or higher. You&#39;re using the latest version of Chrome or Firefox. Step 1: Install the project dependenciesAnchor link to section titled \"Step 1: Install the project dependencies\" If you haven&#39;t already, clone the app that you want to work on, and then navigate to the project directory. Run your package manager&#39;s install command to install the project&#39;s dependencies. Shopify CLI is a dependency of all apps created with Shopify 3.0 or higher. Step 2: Verify the installationAnchor link to section titled \"Step 2: Verify the installation\" After you install the dependencies for the app, check the version to make sure that Shopify CLI is available. Step 3: Preview the appAnchor link to section titled \"Step 3: Preview the app\" After you install your app&#39;s dependencies locally, you can work with it by building the app and starting a local development server. Shopify CLI uses Cloudflare to create a tunnel that allows your app to be accessed using a unique HTTPS URL. Press p to open your app&#39;s preview URL in a browser. Navigate to your newly-created app directory. To preview your app, run the following command: The CLI walks you through the following: Logging into your Shopify Partner account and, if needed, selecting a Partner organization Connecting your app to an existing app in the Partner Dashboard, or creating a new app Creating a tunnel between your local environment and the development store using Cloudflare Installing your app on a development store To learn more about the processes that are executed when you run dev, refer to the Shopify CLI command reference. On this page RequirementsStep 1: Install the project dependenciesStep 2: Verify the installationStep 3: Preview the app","https://shopify.dev/docs/apps/app-extensions/list":"List of app extensions App extensions relate to specific use cases and have varying requirements. This guide describes the available app extensions that you can use to surface your app&#39;s functionality to Shopify user interfaces. The following table lists all of the available app extensions that you can build. For each app extension listed in the table, you can review the following information: The area of the Shopify interface the app extension is associated with. Whether the app extension is versioned. Whether the app extension requires review and approval from Shopify. The tool to use to create the extension. Links to detailed documentation. Shopify interface area App extension Versioned? Requires review and approval? Create using Description Shopify admin Admin links No No Partner Dashboard Add quick links to your app from any page in the Shopify admin. Bulk action links No No Partner Dashboard Add bulk app actions to any resource page in the Shopify admin. Navigation links No No Partner Dashboard Add navigation links to display your embedded app's navigation items consistently across devices. Marketing activities Yes No Partner Dashboard Enable users to manage promotional campaigns and marketing automations from the Marketing page. Product subscription Yes No Shopify CLI Add recurring billing options for users in the Shopify admin. Subscription link No No Partner Dashboard Customize the link that allow users to see the subscription details in your subscription-enabled application. Web pixel Yes No Shopify CLI Run JavaScript code snippets on the order status page to collect behavioral data for marketing campaign optimization and analytics. Checkout Checkout UI extensions Yes No Shopify CLI Add custom workflows and functionality at defined points in the checkout process. Shopify Functions Yes No Shopify CLI Inject custom code into key areas of the Shopify platform, such as checkout or cart. Post-purchase Yes Yes Shopify CLI Help users increase sales by adding products for purchase after checkout. Web pixel Yes No Shopify CLI Run JavaScript code snippets on an online store to collect behavioral data for marketing campaign optimization and analytics. Flow Triggers Yes No Partner Dashboard Connect your app to Shopify Flow so that events that occur in your app can trigger workflows. Actions Yes No Partner Dashboard Connect your app to Shopify Flow so that your app receives data when a workflow action runs. Webhooks No No Partner Dashboard Improve efficiency by letting Shopify Flow notify your app when your triggers are in use. Online store Theme app extensions Yes No Shopify CLI Integrate with Online Store 2.0 themes. Theme app extensions act as a replacement for using the Script Tag or Asset resources to integrate apps with online stores. Web pixel Yes No Shopify CLI Run JavaScript code snippets on an online store to collect behavioral data for marketing campaign optimization and analytics. Payments Payments extension Yes Yes Partner Dashboard Allow customers to complete purchases using a payment method provided by your app. Shopify Point of Sale (POS) POS UI Extensions Yes No Shopify CLI Add custom functionality at defined areas in the POS app. POS links No No Partner Dashboard Link directly to your app from pages in the Shopify POS app. Cart app extension No No Partner Dashboard Add your app’s loyalty points or other promotional discounts to the cart in the Shopify POS app. Product recommendations No No Partner Dashboard Show product recommendations in the Shopify POS app. Next stepsAnchor link to section titled \"Next steps\" Learn how to create and publish a version of your app extension.","https://shopify.dev/docs/apps/marketing/pixels":"On this page How web pixels workSandbox environmentsNext steps Web pixels This guide describes how web pixels work, introduces the sandbox environments that are available, and provides some considerations before you get started. How web pixels workAnchor link to section titled \"How web pixels work\" Pixels are JavaScript code snippets that run on the online store and collect behavioral data, referred to as customer events, for marketing campaign optimization and analytics. After you’ve created your web pixel and configured it to a merchant’s shop, your pixel is able to load in the shop’s online store. As a customer browses the online store, they’ll trigger customer events that are published to a Shopify data layer or event bus. Your pixel can subscribe to the events on this data layer and then transform the event payloads into a format that conforms to the requirements of your pixel’s data collection endpoint. BenefitsAnchor link to section titled \"Benefits\" Web pixel app extensions provide developers with a simplified process for managing and processing behavioral data, by loading pixels in a secure sandbox environment with APIs for subscribing to customer events. Web pixel app extensions provide the following benefits to app users and developers: Eliminate or minimize the need for users to add tracking code Securely access all surfaces, like storefront, checkout and post-purchase pages Control what data the developers have access to Avoid performance and privacy alerts Provide a smaller pixel code libraries with the removal of excess DOM manipulation code Requesting consentAnchor link to section titled \"Requesting consent\" Web pixel app extensions are compatible with the Customer Privacy API, so you can request consent as needed. Web pixel app extension callbacks are executed only after the visitor has given consent. When the buyer gives consent, all registered events are replayed to capture any events that already occurred on the page. Sandbox environmentsAnchor link to section titled \"Sandbox environments\" Web pixels are loaded in a sandbox on a visitor&#39;s browser, and are designed to give merchants and buyers complete control over what data is accessible to app developers. These controls mean some common features of pixels won’t work the same or won’t work at all. Specifically, these include any features that rely on scraping the DOM for information or attempting to write to the DOM. Although these limitations may seem constraining, most can be overcome by leveraging the data passed into the sandbox using the web pixel extension API. While this documentation is focused on web pixel app extensions, it&#39;s important to note that there are two types of sandbox environments: strict and lax. Strict sandbox (Web pixel app extension)Anchor link to section titled \"Strict sandbox (Web pixel app extension)\" App developers create web pixel app extensions which are loaded in a strict sandbox environment using web workers. This environment has access to many of the same globals as you’d get with JavaScript running in a browser. However, we only guarantee the presence of the following globals: self, a reference back to the global object. console, which is the same console available in the browser and can be used for printing to the browser’s console. Note: Your app should not log any content when running in production. setTimeout, clearTimeout, setInterval, and clearInterval, which behave the same as they do outside a web worker fetch and related globals (Headers, Request, and Response), which can be used to make HTTP requests to arbitrary endpoints. Note: Any requests you make must explicitly support cross-origin resource sharing (CORS), just as they would if the request were coming from fetch() outside of a web worker. Caution You must not rely on any other globals being available. Many globals will be explicitly overwritten to be undefined in the sandbox, and non-language globals that aren’t hidden and aren’t in the list above might also be overwritten at any time. Traditional JavaScript pixels that use browser APIs such as window.document won&#39;t work in this environment. You can use contextual APIs available to web pixel app extensions to replicate specific browser API functionality. Lax sandbox (Custom web pixel)Anchor link to section titled \"Lax sandbox (Custom web pixel)\" Custom pixels are loaded in a lax sandbox environment. The lax sandbox is an iframe element that has the sandbox attribute defined with the allow-scripts and allow-forms values. This setup allows legacy Javascript pixels to be inserted onto the page using an iframe. Traditional Javascript pixels that are placed in the lax sandbox cannot access the top frame. There are certain properties that return different values because you cannot access the top frame. For example, window.href returns the sandbox URL  instead of the top frame URL. This feature is intended for merchants to use and more information can be found in the help docs. We strongly recommend that developers create apps and encourage users to install their apps instead of creating Custom Pixels, for greater integration. Next stepsAnchor link to section titled \"Next steps\" Create a web pixel app extension to subscribe to all events emitted by Shopify. On this page How web pixels workSandbox environmentsNext steps"}}