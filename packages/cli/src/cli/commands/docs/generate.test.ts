import {CommandWithMarkdown, writeCommandDocumentation, writeCommandFlagInterface} from './generate.js'
import {writeFile} from '@shopify/cli-kit/node/fs'
import {describe, test, vi, expect} from 'vitest'

vi.mock('@shopify/cli-kit/node/fs')

const testCommand: CommandWithMarkdown = {
  aliases: [],
  args: {},
  flags: {
    flag1: {
      name: 'flag1',
      type: 'option',
      char: 'f',
      description: 'flag description',
    },
    flag2: {
      name: 'flag2',
      type: 'boolean',
      char: 'a',
      description: 'another flag description',
      allowNo: false,
    },
  },
  descriptionWithMarkdown: 'command markdown description',
  description: 'command description',
  summary: 'command summary',
  hidden: false,
  hiddenAliases: [],
  id: 'test-command',
  load: () => Promise.resolve({} as any),
}

describe('writeCommandFlagInterface', () => {
  test('calls writeFile with the correct content', async () => {
    await writeCommandFlagInterface(testCommand)

    expect(writeFile).toHaveBeenCalledWith(
      expect.stringContaining('docs-shopify.dev/commands/interfaces/test-command.interface.ts'),
      `// This is an autogenerated file. Don't edit this file manually.
export interface testcommand {
  /**
   * flag description
   */
  '-f, --flag1 <value>'?: string

  /**
   * another flag description
   */
  '-a, --flag2'?: ''
}
`,
    )
  })

  test('calls writeFile with the correct content for a command with no flags', async () => {
    await writeCommandFlagInterface({...testCommand, flags: {}})

    expect(writeFile).toHaveBeenCalledWith(
      expect.stringContaining('docs-shopify.dev/commands/interfaces/test-command.interface.ts'),
      `// This is an autogenerated file. Don't edit this file manually.
export interface testcommand {

}
`,
    )
  })
})

describe('writeCommandDocs', () => {
  test('calls writeFile with the correct content', async () => {
    await writeCommandDocumentation(testCommand)

    expect(writeFile).toHaveBeenNthCalledWith(
      1,
      expect.stringContaining('docs-shopify.dev/commands/test-command.doc.ts'),
      `// This is an autogenerated file. Don't edit this file manually.
import {ReferenceEntityTemplateSchema} from '@shopify/generate-docs'

const data: ReferenceEntityTemplateSchema = {
  name: 'test-command',
  description: \`command markdown description\`,
  overviewPreviewDescription: \`command summary\`,
  type: 'command',
  isVisualComponent: false,
  defaultExample: {
    codeblock: {
      tabs: [
        {
          title: 'test-command',
          code: './examples/test-command.example.sh',
          language: 'bash',
        },
      ],
      title: 'test-command',
    },
  },
  definitions: [
  {
    title: 'Flags',
    description: 'The following flags are available for the \`test-command\` command:',
    type: 'testcommand',
  },
  ],
  category: 'Commands',
  subCategory: 'common',
  related: [
  ],
}

export default data`,
    )

    expect(writeFile).toHaveBeenNthCalledWith(
      2,
      expect.stringContaining('docs-shopify.dev/commands/examples/test-command.example.sh'),
      'shopify test-command [flags]',
    )
  })
})
